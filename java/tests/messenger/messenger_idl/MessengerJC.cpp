#include "MessengerJC.h"
#include "idl2jni_runtime.h"

/* Generated by /software/OpenDDS-3.13.2/bin/idl2jni running on input file Messenger.idl */


/* Begin MODULE: Messenger */



/* Begin ENUM: Choice */

void copyToCxx (JNIEnv *jni, Messenger::Choice &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  jfieldID fid = jni->GetFieldID (clazz, "_value", "I");
  target = static_cast<Messenger::Choice> (jni->GetIntField (source, fid));
}

void copyToJava (JNIEnv *jni, jobject &target, const Messenger::Choice &source, bool createNewObject)
{
  ACE_UNUSED_ARG (createNewObject);
  jclass clazz = findClass (jni, "Messenger/Choice");
  jmethodID factory = jni->GetStaticMethodID (clazz, "from_int", "(I)LMessenger/Choice;");
  target = jni->CallStaticObjectMethod (clazz, factory, source);
}


/* End ENUM: Choice */


/* Begin STRUCT: Message */

void copyToCxx (JNIEnv *jni, Messenger::Message &target, jobject source)
{
  jclass clazz = jni->GetObjectClass (source);
  {
    jfieldID fid = jni->GetFieldID (clazz, "from", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.from, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "subject", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.subject, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "subject_id", "I");
    target.subject_id = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "text", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.text, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "count", "I");
    target.count = jni->GetIntField (source, fid);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "words", "Ljava/lang/String;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.words, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "achoice", "LMessenger/Choice;");
    jobject obj = jni->GetObjectField (source, fid);
    copyToCxx (jni, target.achoice, obj);
    jni->DeleteLocalRef (obj);
  }
}

void copyToJava (JNIEnv *jni, jobject &target, const Messenger::Message &source, bool createNewObject)
{
  jclass clazz;
  if (createNewObject)
    {
      clazz = findClass (jni, "Messenger/Message");
      jmethodID ctor = jni->GetMethodID (clazz, "<init>", "()V");
      target = jni->NewObject (clazz, ctor);
    }
  else
    {
      clazz = jni->GetObjectClass (target);
    }
  {
    jfieldID fid = jni->GetFieldID (clazz, "from", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.from, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "subject", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.subject, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "subject_id", "I");
    jni->SetIntField (target, fid, source.subject_id);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "text", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.text, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "count", "I");
    jni->SetIntField (target, fid, source.count);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "words", "Ljava/lang/String;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.words, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
  {
    jfieldID fid = jni->GetFieldID (clazz, "achoice", "LMessenger/Choice;");
    jobject obj = createNewObject ? 0 : jni->GetObjectField (target, fid);
    copyToJava (jni, obj, source.achoice, createNewObject);
    jni->SetObjectField (target, fid, obj);
    jni->DeleteLocalRef (obj);
  }
}


/* End STRUCT: Message */

/* End MODULE: Messenger */
